<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Plug-in Unit Test With Mock</Title>
      <Shortcut>CRMPluginUTM</Shortcut>
      <Description>Creates a Dynamics CRM plug-in unit test with CRM Organization Service mock.</Description>
      <HelpUrl></HelpUrl>
      <Author>Jason Lattimer</Author>
      <Keywords>
        <Keyword>Dynamics CRM</Keyword>
        <Keyword>CRM</Keyword>
        <Keyword>Unit Test</Keyword>
        <Keyword>Plug-in</Keyword>
        <Keyword>Mock</Keyword>
      </Keywords>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[[TestMethod]
        public void TestMethod1()
        {
	          //Target
            Entity targetEntity = new Entity { LogicalName = "name", Id = Guid.NewGuid() };

            #region Optional Images/Configs
            //Optional Pre/Post Images - configure as needed
            Entity preImage = null; //new Entity { LogicalName = "name", Id = Guid.NewGuid() };
            Entity postImage = null; //new Entity { LogicalName = "name", Id = Guid.NewGuid() };

            //Optional Secure/Unsecure Configurations - configure as needed
             string unsecureConfig = String.Empty;
            string secureConfig = String.Empty;
            #endregion

            //Expected value(s)
            const string expected = null;

            //Invoke the plug-in
            InvokePlugin(_namespaceClassAssembly, ref targetEntity, preImage, postImage, unsecureConfig, secureConfig, TestMethod1Setup);

            //Test(s)
            Assert.AreEqual(expected, null);
        }

        /// <summary>
        /// Modify to mock CRM Organization Service actions
        /// </summary>
        /// <param name="serviceMock">The Organization Service to mock</param>
        /// <returns>Configured Organization Service</returns>
        private static Mock<IOrganizationService> TestMethod1Setup(Mock<IOrganizationService> serviceMock)
        {
	          //EntityCollection queryResult = new EntityCollection();
	          ////Add created items to EntityCollection

	          //serviceMock.Setup(t =>
	          //    t.RetrieveMultiple(It.IsAny<QueryExpression>()))
	          //    .ReturnsInOrder(queryResult);

	          return serviceMock;
        }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
